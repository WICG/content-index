<pre class='metadata'>
Title: Content Index
Shortname: content-index
Level: 1
Status: ED
Group: wicg
URL: https://rayankans.github.io/content-index/spec/
Editor: Peter Beverloo, Google, beverloo@google.com
Editor: Rayan Kanso, Google, rayankans@google.com
Abstract: An API for websites to register their offline enabled content with the browser.
</pre>

<pre class="link-defaults">
  spec:html; type:dfn; for:/; text:create a new browsing context
  spec:infra; type:dfn; text:string
  spec:promises-guide-1; type:dfn; text:resolve
</pre>

<style>
  .algorithm dl {
    overflow: hidden;
  }
  .algorithm dt {
    font-weight: normal;
    float: left;
    clear: left;
    line-height: 1.5;
    margin-right: 0.3em;
  }
  .algorithm dt::after {
    content: '- ';
  }
  .algorithm dd {
    margin-left: 0em;
  }
</style>

Introduction {#intro}
=====================

High quality offline-enabled web content is not easily discoverable by users right now. They would have to know which
websites work offline or install a PWA to be able to browse through content while offline. This is not a great user
experience as there is no central point to discover available content. To address this, the spec covers a new API which
allows developers to tell the browser about their specific content.

The content index allows websites to register their offline enabled content in the browser. This allows the browser to
improve their offline capabilities and offer content to users to browse through while offline. This data could also be
used to improve on-device search and augment browsing history.

Infrastructure {#infrastructure}
================================

## Extensions to service worker registration ## {#service-worker-registration-concept-extensions}

A [=/service worker registration=] additionally has:

  <div dfn-for="service worker registration">
    * <dfn>Content index entries</dfn> (a [=map=]), where each key is a DOMString, and each item is a
        [=content index entry=].
  </div>
  
  ## Content index entry ## {#content-index-entry-concept}
  
  A <dfn>content index entry</dfn> consists of:
  
  <div dfn-for="content index entry">
    * A <dfn>description</dfn> (a {{ContentDescription}}).
    * A <dfn>launch url</dfn> (a [=/URL=]).
    * A <dfn>service worker registration</dfn> (a [=/service worker registration=]).
  </div>
  
  ### [=Display=] ### {#content-index-entry-display}
  
  <div algorithm>
    To <dfn>display</dfn> a [=/content index entry=] (|entry|) for a given |environment| (an
    [=environment settings object=]), the user agent must present a user interface that follows these rules:
  
    * The UI MUST prominently display the |entry|'s [=content index entry/service worker registration=]'s [=service
        worker registration/scope url=]'s [=url/origin=].
    * The UI may display |entry|'s [=content index entry/description=]'s {{ContentDescription/title}}.
    * The UI may display |entry|'s [=content index entry/description=]'s {{ContentDescription/description}}.
    * The UI may use |entry|'s [=content index entry/description=]'s {{ContentDescription/category}} in display
        decisions.
    * The UI may select icons for display from |entry|'s [=content index entry/description=]'s
        {{ContentDescription/icons}}. Any icon (an {{ImageResource}}) can be [=/fetched=] using a new [=/request=] with
        the following properties:
        : [=request/URL=]
        :: The {{ImageResource}}'s [=ImageResource/src=].
        : [=request/Client=]
        :: |environment|.
        : [=request/Keepalive flag=]
        :: Set.
        : [=request/Destination=]
        :: "`image`".
        : [=request/Mode=]
        :: "`no-cors`".
        : [=request/Credentials mode=]
        :: "`include`".
    * The UI MUST provide a way for the user to delete the underlying content exposed by the UI, in which case
        run [=delete a content index entry=] for |entry|.
    * The UI MUST provide a way for the user to activate it (for example by clicking), in which case run
        [=activate a content index entry=] for |entry|.
  </div>

Algorithms {#algorithms}
========================

## [=Delete a content index entry=] ## {#delete-a-content-index-entry-algorithm}

  <div algorithm>
    To <dfn>delete a content index entry</dfn> for |entry| (a [=content index entry=]), run these steps:

    1. Let |id| be |entry|'s [=content index entry/description=]'s {{ContentDescription/id}}.
    1. Let |contentIndexEntries| be |entry|'s [=content index entry/description=]'s [=content index entries=].
    1. [=map/Remove=] |contentIndexEntries|[|id|].
    1. [=Fire a content delete event=] for |entry|.
  </div>

## [=Activate a content index entry=] ## {#activate-a-content-index-entry-algorithm}

  <div algorithm>
    To <dfn>activate a content index entry</dfn> for |entry| (a [=content index entry=]), run these steps:
    
    1. Let |browsingContext| be the result of running [=create a new browsing context=].
    1. [=Navigate=] |browsingContext| to |entry|'s [=content index entry/launch url=].
  </div>

## [=Fire a content delete event=] ## {#fire-content-delete-event-algorithm}

  <div algorithm>
    To <dfn>Fire a content delete event</dfn> for |entry| (a [=content index entry=]), [=fire a functional event=] named
    "<i>contentdelete</i>" using {{ContentIndexEvent}} on |entry|'s [=content index entry/service worker registration=] with
    the following properties:
      : {{ContentIndexEvent/id}}
      :: |entry|'s [=content index entry/description=]'s {{ContentDescription/id}}.
  </div>

API {#api}
==========

## Extensions to {{ServiceWorkerGlobalScope}} ## {#extensions-to-service-worker-global}

<script type="idl">
partial interface ServiceWorkerGlobalScope {
  attribute EventHandler oncontentdelete;
};
</script>

### Events ### {#service-worker-global-events}

The following is the <a>event handler</a> (and its corresponding <a>event handler event type</a>) that must be
supported, as <a>event handler IDL attributes</a>, by all objects implementing {{ServiceWorker}} interface:

<table class="data">
  <thead>
    <tr>
      <th>[=event handler event type=]</th>
      <th>[=event handler=]</th>
      <th>Interface</th>
    </tr>
  </thead>
  <tbody dfn-for="ServiceWorkerGlobalScope" dfn-type="event">
    <tr>
      <td><dfn>contentdelete</dfn></td>
      <td>{{ServiceWorkerGlobalScope/oncontentdelete}}</td>
      <td>{{ContentIndexEvent}}</td>
    </tr>
  </tbody>
</table>

## Extensions to {{ServiceWorkerRegistration}} ## {#extensions-to-service-worker-registration}

<script type="idl">
partial interface ServiceWorkerRegistration {
  [SameObject] readonly attribute ContentIndex index;
};
</script>

<div dfn-for="ServiceWorkerRegistration">

  A {{ServiceWorkerRegistration}} has a <dfn>content index</dfn> (a {{ContentIndex}}), initially a
  new {{ContentIndex}} whose [=ContentIndex/service worker registration=] is the [=context
  object=]'s [=/service worker registration=].

  The <dfn attribute>index</dfn> attribute's getter must return the [=context object=]'s
  [=ServiceWorkerRegistration/content index=].
</div>

## {{ContentIndex}} ## {#content-index}

<script type="idl">
enum ContentCategory {
  "homepage",
  "article",
  "video",
  "audio",
};

dictionary ContentDescription {
  required DOMString id;
  required DOMString title;
  required DOMString description;
  required ContentCategory category;
  required sequence<ImageResource> icons;
  required USVString launchUrl;
};

[Exposed=(Window,Worker)]
interface ContentIndex {
  Promise<void> add(ContentDescription description);
  Promise<void> delete(DOMString id);
  Promise<sequence<ContentDescription>> getDescriptions();
};
</script>

<div dfn-for="ContentIndex">

  A {{ContentIndex}} has a <dfn>service worker registration</dfn> (a [=/service worker registration=]).

  ### {{ContentIndex/add()}} ### {#content-index-add}

  <div algorithm>
    The <dfn method>add(|description|)</dfn> method, when invoked, must return [=a new promise=] |promise| and run
    these steps [=in parallel=]:

    1. Let |registration| be the [=context object=]'s [=ContentIndex/service worker registration=].
    1. Let |contentIndexEntries| be |registration|'s [=content index entries=].
    1. If either of |description|'s {{ContentDescription/id}}, {{ContentDescription/title}},
        {{ContentDescription/description}}, or {{ContentDescription/launchUrl}} is an empty [=/string=], [=reject=]
        |promise| with a {{TypeError}} and abort these steps.
    1. Let |launchURL| be the result of [=parsing=] |description|'s {{ContentDescription/launchUrl}} with
        [=context object=]'s [=relevant settings object=]'s [=API base URL=].
    1. TODO: check |launchURL| is controlled by the |registration|.
    1. Let |entry| be a new [=/content index entry=] with:
        : [=content index entry/description=]
        :: |description|.
        : [=content index entry/launch url=]
        :: |launchURL|
        : [=content index entry/service worker registration=]
        :: |registration|.
    1. Let |id| be |description|'s {{ContentDescription/id}}.
    1. [=map/Set=] |contentIndexEntries|[|id|] to |entry|.
    1. [=Display=] |entry| from the [=context object=]'s [=relevant settings object=].
    1. [=Resolve=] |promise| with undefined.

    Note: Adding a description with an existing ID would overwrite the previous value.
  </div>

  ### {{ContentIndex/delete()}} ### {#content-index-delete}

  <div algorithm>
    The <dfn method>delete(|id|)</dfn> method, when invoked, must return [=a new promise=] |promise| and run these
    steps [=in parallel=]:

    1. Let |registration| be the [=context object=]'s [=ContentIndex/service worker registration=].
    1. Let |contentIndexEntries| be |registration|'s [=content index entries=].
    1. [=map/Remove=] |contentIndexEntries|[|id|].
    1. [=Resolve=] |promise| with undefined.
  </div>

  ### {{ContentIndex/getDescriptions()}} ### {#content-index-getdescriptions}

  <div algorithm>
    The <dfn method>getDescriptions()</dfn> method, when invoked, must return [=a new promise=] |promise| and run these
    steps [=in parallel=]:

    1. Let |registration| be the [=context object=]'s [=ContentIndex/service worker registration=].
    1. Let |contentIndexEntries| be |registration|'s [=content index entries=].
    1. Let |descriptions| be an empty [=/list=].
    1. [=map/For each=] id → |entry| of |contentIndexEntries|:
        1. [=list/Append=] |entry|'s [=content index entry/description=] to |descriptions|.
    1. [=Resolve=] |promise| with |descriptions|.
  </div>

</div>

</div>

## {{ContentIndexEvent}} ## {#content-index-event}

<script type="idl">
dictionary ContentIndexEventInit : ExtendableEventInit {
  required DOMString id;
};

[Constructor(DOMString type, ContentIndexEventInit id), Exposed=ServiceWorker]
interface ContentIndexEvent : ExtendableEvent {
  readonly attribute DOMString id;
};
</script>